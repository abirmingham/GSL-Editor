import {
    DocumentHighlight,
    DocumentHighlightParams,
} from 'vscode-languageclient';
import { ParseResult } from './ParsingManager';
import * as LexerUtil from './util/LexerUtil';
import { GslLexer } from './antlr/autogenerated/GslLexer';
import { handleStringHighlight } from './highlights/handleStringHighlight';
import { handleVariableHighlight } from './highlights/handleVariableHighlight';
import { handleBlockHighlight } from './highlights/handleBlockHighlight';
import { handleThenHighlight } from './highlights/handleThenHighlight';
import { handleCommandHighlight } from './highlights/handleCommandHighlight';

// TODO handle push/pop of variables

export const onDocumentHighlight = (
    params: DocumentHighlightParams,
    parseResult: ParseResult
): DocumentHighlight[] => {
    try {
        const tokens = parseResult.tokenStream.getTokens();

        const tokenInfo = LexerUtil.findToken(tokens, params.position, {
            preferPredicate: (a, b) => {
                if (LexerUtil.Symbols.Variables.has(a.type)) {
                    // If the cursor is between a variable and something else,
                    // chances are we care more about the variable than the
                    // other thing, e.g. parans, operators, etc
                    return true;
                }
                if (b.type === GslLexer.NEWLINE) {
                    return true; // we're not going to highlight a newline
                }
                return false;
            },
        });
        console.log(
            JSON.stringify({
                tokenLine: tokenInfo?.token.line,
                posLine: params.position.line,
            })
        );

        if (!tokenInfo) {
            console.error('Failed to find token');
            return [];
        }

        const { type } = tokenInfo.token;

        if (LexerUtil.Symbols.Commands.has(type)) {
            return handleCommandHighlight(tokens, tokenInfo);
        }
        if (LexerUtil.Symbols.Variables.has(type)) {
            return handleVariableHighlight(tokenInfo, parseResult);
        }
        if (LexerUtil.isBlockSymbol(type)) {
            return handleBlockHighlight(tokens, tokenInfo, parseResult);
        }
        if (type === GslLexer.STRING) {
            return handleStringHighlight(
                tokens,
                tokenInfo,
                parseResult,
                params
            );
        }
        if (type === GslLexer.THEN) {
            return handleThenHighlight(tokens, tokenInfo, parseResult);
        }
    } catch (e) {
        console.error(e);
    }
    return [];
};
